# Тема урока Пакеты, модули, библиотеки и Фреймворки
# venv , pip
# from colorama import init, Fore, Back, Style

# Инициализация (необходима для Windows)
# init()
#
# # Используем Fore для текста разных цветов
# print(Fore.RED + 'Этот текст красный')
# print(Fore.GREEN + 'Этот текст зеленый')
# print(Fore.BLUE + 'Этот текст синий')
#
# # Используем Back для фона разных цветов
# print(Back.YELLOW + 'Текст с желтым фоном' + Back.RESET)
#
# # Используем Style для обнуления стиля
# print(Style.RESET_ALL + 'Текст со стандартными цветами')



# 1. Декоратор @staticmethod
# Описание:
# Декоратор @staticmethod используется для того, чтобы определить метод, который не зависит от экземпляра класса
# (не использует self) и не зависит от самого класса (не использует cls). Такой метод можно вызывать без создания
# экземпляра класса.
#
# Когда использовать:
# Если метод не нуждается в доступе к данным экземпляра или класса, но логически связан с классом. Например,
# утилитарные функции или вспомогательные вычисления, которые не требуют состояния объекта.

class Math:
    @staticmethod
    def add(a, b):
        return a + b

    @staticmethod
    def multiply(a, b):
        return a * b

# Использование статических методов
# print(Math.add(3, 5))       # 8
# print(Math.multiply(4, 2))  # 8

# Объяснение:
# Метод add и multiply — это обычные функции, которые принимают аргументы, но не работают с атрибутами
# класса или экземпляра. Мы можем вызывать эти методы, используя сам класс, без создания экземпляра.


# 2. Декоратор @classmethod
# Описание:
# Декоратор @classmethod используется для определения метода, который принимает первым аргументом
# сам класс (не экземпляр). Этот аргумент обычно называется cls. Метод класса может изменять состояние класса,
#  но не работает с состоянием конкретного экземпляра.
#
# Когда использовать:
# Когда метод должен работать с данными класса, а не с данными конкретного экземпляра.
# Например, методы для работы с состоянием всего класса или создания экземпляров.


class Person:
    population = 0  # Атрибут класса

    def __init__(self, name):
        self.name = name
        Person.population += 1

    @classmethod
    def get_population(cls):
        return cls.population

    @classmethod
    def create_person(cls, name):
        return cls(name)

# Использование метода класса
person1 = Person("Alice")
person2 = Person("Bob")
person3 = Person("Bobs")
print(Person.get_population())  # 2

# Использование метода для создания экземпляра
person4 = Person.create_person("Charlie")
print(person4.name)  # Charlie

# Объяснение:
#
# Метод get_population работает с атрибутом класса population и возвращает
#  количество созданных объектов. Он использует cls вместо self, потому что это метод класса.
# Метод create_person создаёт новый объект класса, используя cls(name) вместо явного вызова
# конструктора __init__. Это позволяет изменять процесс создания объектов, если потребуется.


# 3. Декоратор @property
# Описание:
# Декоратор @property используется для того, чтобы метод стал доступным как атрибут, но при этом оставался методом.
# Это позволяет скрывать логику вычислений или проверки, делая код более чистым. Обычно используется
# для создания геттеров и сеттеров.
#
# Когда использовать:
# Когда нужно предоставить доступ к атрибутам объекта, но при этом контролировать
# этот доступ (например, с помощью вычислений или проверки).


class Circle:
    def __init__(self, radius):
        self._radius = radius

    @property
    def radius(self):
        return self._radius

    @property
    def area(self):
        return 3.14 * self._radius ** 2

    @radius.setter
    def radius(self, value):
        if value <= 0:
            raise ValueError("Радиус должен быть положительным!")
        self._radius = value

# Использование свойства
# circle = Circle(5)
# print(circle.radius)  # 5
# print(circle.area)    # 78.5
#
# # Изменение радиуса с использованием сеттера
# circle.radius = 10
# print(circle.radius)  # 10
# print(circle.area)    # 314.0

# Попытка установить неправильный радиус
# circle.radius = -5  # Ошибка: ValueError: Радиус должен быть положительным!


# Объяснение:
#
# Метод radius является свойством благодаря декоратору @property. Он позволяет получить значение атрибута
# _radius без прямого доступа к нему.
# Метод area также является свойством, но он вычисляет площадь круга на основе радиуса.
# Метод radius имеет @radius.setter, который позволяет изменять значение радиуса, при этом проверяя,
# что оно положительное.
# Важно:
# С помощью @property можно создать такие свойства, которые выглядят как атрибуты, но на
# самом деле это методы, которые могут выполнять вычисления или проверку данных.


